##Lab 03
##Name: Farhan Akbor Khan
##ID: 20301230
##Section: 06


from pickle import FALSE, TRUE
import random

input1 = -1
input1_allow = False
val_allow= False
while (input1 < 1 or input1 > 10**2) and input1_allow == False:
    input1 = int(input("Give 𝑁 ( 1 ≤ 𝑁 ≤ 10^2):"))

    if input1 >= 1 and input1 <= 10**2:
        input1_allow = TRUE
    else:
        print('Invalid N. Input is not in 𝑁( 1 ≤ 𝑁 ≤ 10^2) range!')
input1_list = []

for i in range(input1):
    val_allow = FALSE

    while val_allow == FALSE:

        input2 = input("Write the transaction:").replace(' ', '')

        if input2[0] == 'l':
            v = int(input2[1:])
            input1_list.append(v)
            val_allow=TRUE

        elif input2[0] == 'd':
            value = -1*int(input2[1:])
            input1_list.append(value)
            val_allow=TRUE

        else:
            print('Rejected, Try Again')
            val_allow=FALSE

if (val_allow == TRUE):

    input1_sum = input1
    input_list = input1_list
    #print(input_list,"test")

    def My_fun(input_list, length, range_g, children):
        #print(length,range_g,'k',children)
        for i in range(length):
            fun = 0
            for j in range(range_g):
                #print(children[i][0][j])
                if children[i][0][j] == '1':
                    fun = fun+int(input_list[j])
            children[i][1] = fun

    result = FALSE
    w = 0

    while result == FALSE and w < 75:

        ##First Generation##
        sum_g = 75
        family = [[]]
        for i in range(sum_g):
            g_string = ""
            tester_g = False
            while(tester_g == False):
                for j in range(input1_sum):
                    g_string = g_string+(str(random.randint(0, 1)))

                if(g_string.count('1') < 2):
                    g_string = ""
                    tester_g = False
                else:
                    family[i].append(g_string)
                    tester_g = True
                    if (i < sum_g-1):
                        family.append([])

        ##Fitness variable##
        for i in range(sum_g):
            family[i].append(int(0))

        ##Parent Selection##
        family.sort(key=lambda v: v[1])
        ancestor = [[]]
        half_sum_g = int(sum_g/2)
        ancestor = family[0:half_sum_g]

        ##Crossover##
        family_children = [[]]
        line_idx1 = 0
        for i in range(int(len(ancestor)/2)):
            for j in range(2):
                swap = random.randint(0, input1_sum-1)  ##random portion##
                temp1 = str(ancestor[line_idx1][0][swap])
                ancestor[line_idx1][0] = ancestor[line_idx1][0][:swap] + str(ancestor[line_idx1+1][0][swap]) + ancestor[line_idx1][0][swap+1:]
                ancestor[line_idx1+1][0] = ancestor[line_idx1+1][0][:swap] +str(temp1)+ancestor[line_idx1+1][0][swap+1:]
            line_idx1 = line_idx1+2

        family_children = ancestor

        ##Mutation##
        for i in range(len(family_children)):
            line_idx2 = random.randint(0, input1_sum-1)
            family_children[i][0] = family_children[i][0][:line_idx2] + str(random.randint(0, 1)) + family_children[i][0][line_idx2+1:]
        #print(family_children,"1")
        My_fun(input_list, len(family_children),input1_sum, family_children)
        #print(family_children,"2")
        loop = 0
        while result == FALSE and loop < int(len(family_children)):
            if family_children[loop][1] == 0:
                if(family_children[loop][0].count('1') >= 2):
                    print(family_children[loop][0])
                    result = TRUE
            loop= loop+1
        w = w+1
    if result == FALSE:
        print('-1')
else:
    print('Wrong Input')